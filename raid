local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Consistt/Ui/main/UnLeaked"))()


library.rank = "KiwiX.User"
local Wm = library:Watermark("kiwixcheat.github.io | v" .. library.version ..  " | " .. library:GetUsername() .. " | rank: " .. library.rank)
local FpsWm = Wm:AddWatermark("fps: " .. library.fps)
coroutine.wrap(function()
    while wait(.75) do
        FpsWm:Text("fps: " .. library.fps)
    end
end)()


local Notif = library:InitNotifications()

for i = 0,0,-1 do 
    task.wait(0.05)
    local LoadingXSX = Notif:Notify("Starting Fun", 3, "information") -- notification, alert, error, success, information
end 

library.title = "KiwiX Cheat | GamingChair  [BETA]"

library:Introduction()
wait(1)
local Init = library:Init()






local Tab1 = Init:NewTab("Raids")

local Section1 = Tab1:NewSection("Raids Tab")


local Label1 = Tab1:NewLabel("<------------------YhwachBoss [Farm]------------------>", "left")--"left", "center", "right"

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local isAutoFarmingYWH = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera despuÃ©s de matar al NPC cuando no estÃ¡ presente
local waitTimeBetweenTeleports = 0.1 -- Tiempo de espera entre teletransportes (corto y constante)

-- FunciÃ³n para teletransportar al jugador al NPC
local function teleportToNPC()
    local NPC = game.Workspace.World.Live.Mobs.Yhwach:FindFirstChild("Yhwach")
    local player = Players.LocalPlayer
    
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje estÃ¡ vivo
        if NPC and NPC.PrimaryPart then
            -- Teletransporta al jugador al NPC
            player.Character:SetPrimaryPartCFrame(NPC.PrimaryPart.CFrame)
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4()
    while isAutoFarmingYWH do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reapariciÃ³n del jugador
local Toggle1 = Tab1:NewToggle("Yhwach BossFarm[Raid]", false, function(value5)
    isAutoFarmingYWH = value5
    if isAutoFarmingYWH then
        spawn(autoFarmLoops4) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local isAutoFarmingCandice = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera despuÃ©s de matar al NPC cuando no estÃ¡ presente
local waitTimeBetweenTeleports = 0.1 -- Tiempo de espera entre teletransportes (corto y constante)

-- FunciÃ³n para teletransportar al jugador al NPC
local function teleportToNPC()
    local NPC = game.Workspace.World.Live.Mobs.Candice:FindFirstChild("Candice")
    local player = Players.LocalPlayer
    
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje estÃ¡ vivo
        if NPC and NPC.PrimaryPart then
            -- Teletransporta al jugador al NPC
            player.Character:SetPrimaryPartCFrame(NPC.PrimaryPart.CFrame)
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4Candice()
    while isAutoFarmingCandice do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reapariciÃ³n del jugador
local Toggle1 = Tab1:NewToggle("Candice BossFarm[Raid]", false, function(value5Candice)
    isAutoFarmingCandice = value5Candice
    if isAutoFarmingCandice then
        spawn(autoFarmLoops4Candice) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)






local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local isAutoFarmingBambietta = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera despuÃ©s de matar al NPC cuando no estÃ¡ presente
local waitTimeBetweenTeleports = 0.1 -- Tiempo de espera entre teletransportes (corto y constante)

-- FunciÃ³n para teletransportar al jugador al NPC
local function teleportToNPC()
    local NPC = game.Workspace.World.Live.Mobs.Bambietta:FindFirstChild("Bambietta")
    local player = Players.LocalPlayer
    
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje estÃ¡ vivo
        if NPC and NPC.PrimaryPart then
            -- Teletransporta al jugador al NPC
            player.Character:SetPrimaryPartCFrame(NPC.PrimaryPart.CFrame)
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4Bambietta()
    while isAutoFarmingBambietta do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reapariciÃ³n del jugador
local Toggle1 = Tab1:NewToggle("Bambietta BossFarm[Raid]", false, function(value5Bambietta)
    isAutoFarmingBambietta = value5Bambietta
    if isAutoFarmingBambietta then
        spawn(autoFarmLoops4Bambietta) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)







local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local isAutoFarmingAs_Nodt = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera despuÃ©s de matar al NPC cuando no estÃ¡ presente
local waitTimeBetweenTeleports = 0.1 -- Tiempo de espera entre teletransportes (corto y constante)

-- FunciÃ³n para teletransportar al jugador al NPC
local function teleportToNPC()
    local NPC = game.Workspace.World.Live.Mobs.As_Nodt:FindFirstChild("As Nodt")
    local player = Players.LocalPlayer
    
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje estÃ¡ vivo
        if NPC and NPC.PrimaryPart then
            -- Teletransporta al jugador al NPC
            player.Character:SetPrimaryPartCFrame(NPC.PrimaryPart.CFrame)
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4As_Nodt()
    while isAutoFarmingAs_Nodt do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reapariciÃ³n del jugador
local Toggle1 = Tab1:NewToggle("As Nodt BossFarm[Raid]", false, function(value5As_Nodt)
    isAutoFarmingAs_Nodt = value5
    if isAutoFarmingAs_Nodt then
        spawn(autoFarmLoops4As_Nodt) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)












local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local isAutoFarmingAskin = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera despuÃ©s de matar al NPC cuando no estÃ¡ presente
local waitTimeBetweenTeleports = 0.1 -- Tiempo de espera entre teletransportes (corto y constante)

-- FunciÃ³n para teletransportar al jugador al NPC
local function teleportToNPC()
    local NPC = game.Workspace.World.Live.Mobs.Askin:FindFirstChild("Askin")
    local player = Players.LocalPlayer
    
    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje estÃ¡ vivo
        if NPC and NPC.PrimaryPart then
            -- Teletransporta al jugador al NPC
            player.Character:SetPrimaryPartCFrame(NPC.PrimaryPart.CFrame)
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4Askin()
    while isAutoFarmingAskin do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reapariciÃ³n del jugador
local Toggle1 = Tab1:NewToggle("Askin BossFarm[Raid]", false, function(value6Askin)
    isAutoFarmingAskin = value6Askin
    if isAutoFarmingAskin then
        spawn(autoFarmLoops4Askin) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)




local Label1 = Tab1:NewLabel("<-------------------HuecoRaid [Farm]------------------->", "left")--"left", "center", "right"

----Workspace.World.Live.Mobs.Boss3:FindFirstChild("Menoscar") [Menoscar]
----Workspace.World.Live.Mobs.Regular2:FindFirstChild("Vasto Lorde") ["Vasto Lorde"]










local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local isAutoFarmingRaidHollow = false -- Variable de control para activar/desactivar el auto farm
local waitTimeAfterKill = 10 -- Tiempo de espera después de matar al NPC cuando no está presente
local waitTimeBetweenTeleports = 0.0 -- Tiempo de espera entre teletransportes (corto y constante)
local distanceFromNPC = 1 -- Distancia en bloques desde el NPC
local verticalOffset = -7.4 -- Offset vertical para estar debajo del NPC
local tweenDuration = 1 -- Duración del tween en segundos

-- Función para habilitar/deshabilitar las colisiones del personaje
local function setNoClip(enabled)
    local character = Players.LocalPlayer.Character
    if character then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = not enabled
            end
        end
    end
end

-- Función para teletransportar al jugador al NPC usando tween
local function tweenToNPC(targetPosition)
    local player = Players.LocalPlayer
    local character = player.Character

    if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            setNoClip(true) -- Habilitar noclip

            local tweenInfo = TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear)
            local tweenGoal = {CFrame = CFrame.new(targetPosition)}

            local tween = TweenService:Create(humanoidRootPart, tweenInfo, tweenGoal)
            tween:Play()
            
            -- Deshabilitar noclip después de que el tween termine
            tween.Completed:Connect(function()
                setNoClip(false)
            end)
        end
    end
end

-- Función para teletransportar al jugador al NPC
local function teleportToNPC()
    local player = Players.LocalPlayer
    local npcs = {
        {name = "Hollow", path = game.Workspace.World.Live.Mobs:FindFirstChild("Regular1")},
        {name = "Vasto Lorde", path = game.Workspace.World.Live.Mobs:FindFirstChild("Regular2")},
        {name = "Menoscar", path = game.Workspace.World.Live.Mobs:FindFirstChild("Boss3")}
    }

    if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
        -- Verificar si el personaje está vivo
        for _, npcInfo in ipairs(npcs) do
            if npcInfo.path then
                local npc = npcInfo.path:FindFirstChild(npcInfo.name)
                if npc and npc.PrimaryPart then
                    -- Calcular la posición de teletransporte
                    local npcPosition = npc.PrimaryPart.Position
                    local direction = (npc.PrimaryPart.CFrame.LookVector).unit -- Vector dirección mirando hacia adelante del NPC
                    local teleportPosition = npcPosition - direction * distanceFromNPC + Vector3.new(0, verticalOffset, 0)
                    tweenToNPC(teleportPosition)
                    return -- Salir de la función una vez que se encuentra un NPC válido
                else
                    print("No detectado: " .. npcInfo.name)
                end
            else
                print("No detectada la carpeta: " .. npcInfo.name)
            end
        end
    end
end

-- Bucle para realizar el auto farm
local function autoFarmLoops4RaidHollow()
    while isAutoFarmingRaidHollow do
        teleportToNPC()
        wait(waitTimeBetweenTeleports) -- Espera el tiempo definido por waitTimeBetweenTeleports
    end
end

-- Toggle para activar/desactivar el auto farm y manejar el evento de reaparición del jugador
local Toggle1 = Tab1:NewToggle("Auto Raid [Hollow]", false, function(RaidHollow)
    isAutoFarmingRaidHollow = RaidHollow
    if isAutoFarmingRaidHollow then
        spawn(autoFarmLoops4RaidHollow) -- Inicia el bucle de auto farm en un nuevo hilo
    end
end)









local Slider1 = Tab1:NewSlider("Distance From NPC  [5 Recommended]", "", true, "/", {min = -60, max = 60, default = 1}, function(value)
    distanceFromNPC = value
    print("distanceFromNPC: " .. distanceFromNPC)
end)




local Slider1 = Tab1:NewSlider("Vertical Offset [-6 Recommended]", "", true, "/", {min = -60, max = 60, default = 1}, function(value)
    verticalOffset = value
    print("verticalOffset: " .. verticalOffset)
end)



local Slider1 = Tab1:NewSlider("Tween Delay", "", true, "/", {min = -60, max = 60, default = 1}, function(value)
    tweenDuration = value
    print("tweenDuration: " .. tweenDuration)
end)





local Tab1 = Init:NewTab("Farm Settings")

local Section1 = Tab1:NewSection("Farm Setting Tab")







local Toggle332
local active = false -- Variable para mantener el estado de la toggle

Toggle332 = Tab1:NewToggle("Kill Aura [Sword]", false, function(value)
    active = value
    if active then
        print("two on")
        -- Iniciar el loop en una nueva coroutine
        coroutine.wrap(function()
            while active do
                local args = {
                    [1] = "Swing",
                    [2] = 1,
                    [3] = "Sword"
                }

                game:GetService("ReplicatedStorage").Remotes.Server.Initiate_Server:FireServer(unpack(args))
                wait(0.01) -- Disminuir el tiempo de espera para mayor velocidad
            end
        end)()
    else
        print("two off")
    end
end):AddKeybind(Enum.KeyCode.LeftControl)
















local Toggle3
local active = false -- Variable para mantener el estado de la toggle

Toggle3 = Tab1:NewToggle("Kill Aura [Fist]", false, function(value)
    active = value
    if active then
        print("two on")
        -- Iniciar el loop en una nueva coroutine
        coroutine.wrap(function()
            while active do
                local args = {
                    [1] = "Swing",
                    [2] = 1,
                    [3] = "Fist"
                }

                game:GetService("ReplicatedStorage").Remotes.Server.Initiate_Server:FireServer(unpack(args))
                wait(0.01) -- Disminuir el tiempo de espera para mayor velocidad
            end
        end)()
    else
        print("two off")
    end
end):AddKeybind(Enum.KeyCode.LeftControl)










local player = game.Players.LocalPlayer

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage.Remotes.Server.Initiate_Server

local bodyParts = {
    "Right Leg",
    "Torso",
    "Left Arm",
    "Right Arm",
    "Left Leg",
    "RightUpperArm",
    "LeftLowerLeg",
    "HumanoidRootPart",
    "LowerTorso",
    "LeftHand",
    "RightUpperLeg",
    "LeftUpperLeg",
    "LeftUpperArm",
    "UpperTorso",
    "LeftLowerArm"
}

-- Añadir las máscaras HollowMask1 a HollowMask9
for i = 1, 9 do
    table.insert(bodyParts, "HollowMask" .. i)
end

local function isWithinRange(part, range)
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    local partPosition = part.Position
    return (playerPosition - partPosition).Magnitude <= range
end

local autoEatEnabled = false
local range = 13

local function autoEat()
    while true do
        if autoEatEnabled and player.Character then
            for _, partName in ipairs(bodyParts) do
                local part = workspace.World.Visuals:FindFirstChild(partName)
                if part and isWithinRange(part, range) then
                    local args = {
                        [1] = "Eat_Body_Part",
                        [2] = part
                    }
                    Remotes:FireServer(unpack(args))
                end
            end
        end
        wait(0.1)
    end
end

local function onCharacterAdded(character)
    if autoEatEnabled then
        spawn(autoEat)
    end
end

local function onPlayerDied()
    autoEatEnabled = false -- Desactivar auto eat cuando el jugador muere
end

player.CharacterAdded:Connect(onCharacterAdded)
player.CharacterAdded:Connect(onPlayerDied) -- Escuchar el evento de muerte del jugador

local function onPlayerRespawned()
    if autoEatEnabled then
        spawn(autoEat)
    end
end

player.CharacterAdded:Connect(onPlayerRespawned)

local Label1 = Tab1:NewLabel("[If you die, you have to re-enable the auto eat toggle. It's a bug.]", "left")
local Label1 = Tab1:NewLabel("[Si te mueres tienes que activar de nuevo la toggle de auto eat es un bug ]", "left")

local Toggle2 = Tab1:NewToggle("Auto Eat [SILENT]", false, function(eatv)
    autoEatEnabled = eatv
    local vers = eatv and "on" or "off"
    print("Auto Eat " .. vers)
    if eatv then
        spawn(autoEat)
    end
end)






local Slider1 = Tab1:NewSlider("Auto Eat Range [30 Recommended]", "", true, "/", {min = 1, max = 60, default = 13}, function(value)
    range = value
    print("Range Eat: " .. range)
end)








local Tab1 = Init:NewTab("Settings")
local Section1 = Tab1:NewSection("        kiwix")
local Keybind1 = Tab1:NewKeybind("Ui Keybind", Enum.KeyCode.RightAlt, function(key)
    Init:UpdateKeybind(Enum.KeyCode[key])
end)






local FinishedLoading = Notif:Notify("Loaded GamingChair", 4, "success")

-- // FUNCTION DOCS: 
--[[
    MAIN COMPONENT DOCS:

    -- // local library = loadstring(game:HttpGet(link: url))()
    -- // library.title = text: string
    -- // local Window = library:Init()

    -- [library.title contains rich text]

    -- / library:Remove()
    -- destroys the library

    -- / library:Text("new")
    -- sets the lbrary's text to something new

    - / library:UpdateKeybind(Enum.KeyCode.RightAlt)
    -- sets the lbrary's keybind to switch visibility to something new

    __________________________

    -- // local notificationLibrary = library:InitNotifications()
    -- // local Notification = notificationLibrary:Notify(text: string, time: number, type: string (information, notification, alert, error, success))

    -- [Notify contains rich text]

    -- / 3rd argument is a function, used like this:
    
    Notif:Notify("Function notification", 7, function()
        print("done")
    end)

    -- / Welcome:Text("new text")
    -- sets the notifications text to something differet [ADDS A +0.4 ONTO YOUR TIMER]

    __________________________

    -- // local Wm = library:Watermark(text: string)

    -- [Watermark contains rich text]

    -- / Wm:Hide()
    -- hides the watermark from eye view

    -- / Wm:Show()
    -- makes the watermark visible at the top of your screen

    -- / Wm:Text("new")
    -- sets the watermark's text to something new

    -- / Wm:Remove()
    -- destroys the watermark

    __________________________

    -- // local Tab1 = Init:NewTab(text: string)

    -- [tab title contains rich text]

    -- / Tab1:Open()
    -- opens the tab you want

    -- / Tab1:Remove()
    -- destroys the tab

    -- / Tab1:Hide()
    -- hides the tab from eye view

    -- / Tab1:Show()
    -- makes the tab visible on the selection table

    -- / Tab1:Text("new")
    -- sets the tab's text to something new

    __________________________

    -- [label contains rich text]

    -- / Label1:Text("new")
    -- sets the label's text to something new

    -- / Label1:Remove()
    -- destroys the label

    -- / Label1:Hide()
    -- hides the label from eye view

    -- / Label1:Show()
    -- makes the tab visible on the page that is used

    -- / Label1:Align("le")
    -- aligns the label to a new point in text X

    __________________________

    -- [Button contains rich text]

    -- / Button1:AddButton("text", function() end)
    -- adds a new button inside of the frame [CAN ONLY GO UP TO 4 BUTTONS AT A TIME]

    -- / Button1:Fire()
    -- executes the script within the button

    -- / Button1:Text("new")
    -- sets the button's text to something new

    -- / Button1:Hide()
    -- hides the button from eye view

    -- / Button1:Show()
    -- makes the button visible

    -- / Button1:Remove()
    -- destroys the button

    __________________________

    -- [Sections contain rich text]

    -- / Section1:Text("new")
    -- sets the section's text to something new

    -- / Section1:Hide()
    -- hides the section from eye view

    -- / Section1:Show()
    -- makes the section visible

    -- / Section1:Remove()
    -- destroys the section

    __________________________

    -- [Toggles contain rich text]

    -- / Toggle1:Text("new")
    -- sets the toggle's text to something new

    -- / Toggle1:Hide()
    -- hides the toggle from eye view

    -- / Toggle1:Show()
    -- makes the toggle visible

    -- / Toggle1:Remove()
    -- destroys the toggle

    -- / Toggle1:Change()
    -- changes the toggles state to the opposite

    -- / Toggle1:Set(true)
    -- sets the toggle to true even if it is true

    -- / Toggle1:AddKeybind(Enum.KeyCode.P, false, function() end) -- false / true is used for just changing the toggles state
    -- adds a keybind to the toggle

    -- / Toggle1:SetFunction(function() end)
    -- sets the toggles function

    __________________________

    -- [Keybinds contain rich text]

    -- / Keybind1:Text("new")
    -- sets the keybind's text to something new

    -- / Keybind1:Hide()
    -- hides the keybind from eye view

    -- / Keybind1:Show()
    -- makes the keybind visible

    -- / Keybind1:Remove()
    -- destroys the keybind

    -- / Keybind1:SetKey(Enum.KeyCode.P)
    -- sets the keybinds new key

    -- / Keybind1:Fire()
    -- fires the keybind function

    -- / Keybind1:SetFunction(function() end)
    -- sets the new keybind function

    __________________________

    -- [Textboxes contain rich text]

    -- / Textbox1:Input("new")
    -- sets the text box's input to something new

    -- / Textbox1:Place("new")
    -- sets the text box's placeholder to something new

    -- / Textbox1:Fire()
    -- fires the textbox function

    -- / Textbox1:SetFunction(function() end)
    -- sets the text boxes new function

    -- / Textbox1:Text("new")
    -- sets the textbox's text to something new

    -- / Textbox1:Hide()
    -- hides the textbox from eye view

    -- / Textbox1:Show()
    -- makes the textbox visible

    -- / Textbox1:Remove()
    -- destroys the textbox

    __________________________

    -- [Selectors contain rich text]

    -- / Selector1:SetFunction(function() end)
    -- sets the selector new function

    -- / Selector1:Text("new")
    -- sets the selector's text to something new

    -- / Selector1:Hide()
    -- hides the selector from eye view

    -- / Selector1:Show()
    -- makes the selector visible

    -- / Selector1:Remove()
    -- destroys the selector

    __________________________

    -- [Sliders contain rich text]

    -- / Slider1:Value(1)
    -- sets the slider new value

    -- / Slider1:SetFunction(function() end)
    -- sets the slider new function

    -- / Slider1:Text("new")
    -- sets the slider's text to something new

    -- / Slider1:Hide()
    -- hides the slider from eye view

    -- / Slider1:Show()
    -- makes the slider visible

    -- / Slider1:Remove()
    -- destroys the slider

    ---------------------------------------------------------------------------------------------------------

    MISC SEMI USELESS DOCS:

    -- / library.rank = ""
    -- returns the rank you choose (default = "private")

    -- / library.fps
    -- returns FPS you're getting in game

    -- / library.version
    -- returns the version of the library

    -- / library.title = ""
    -- returns the title of the library

    -- / library:GetDay("word") -- word, short, month, year
    -- returns the os day

    -- / library:GetTime("24h") -- 24h, 12h, minute, half, second, full, ISO, zone
    -- returns the os time

    -- / library:GetMonth("word") -- word, short, digit
    -- returns the os month

    -- / library:GetWeek("year_S") -- year_S, day, year_M
    -- returns the os week

    -- / library:GetYear("digits") -- digits, full
    -- returns the os year

    -- / library:GetUsername()
    -- returns the localplayers username

    -- / library:GetUserId()
    -- returns the localplayers userid

    -- / library:GetPlaceId()
    -- returns the games place id

    -- / library:GetJobId()
    -- returns the games job id

    -- / library:CheckIfLoaded()
    -- returns true if you're fully loaded

    -- / library:Rejoin()
    -- rejoins the same server as you was in

    -- / library:Copy("stuff")
    -- copies the inputed string

    -- / library:UnlockFps(500) -- only works with synapse
    -- sets the max fps to something you choose
    
    -- / library:PromptDiscord("invite")
    -- invites you to a discord
]]
